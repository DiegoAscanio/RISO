#!/bin/bash

#Variáveis do script
dir_riso=/usr/riso	#diretorio do riso
dir_img=$dir_riso/imagens	#diretorio da imagem
img_win=$dir_img/windows.img	#arquivo da imagem do windows
img_lin=$dir_img/linux.tar	#arquivo da imagem do linux
img_rec=$dir_img/rec.tar	#arquivo da imagem da recuperacao (ubuntu_server)
tor_win=$img_win.torrent	#torrent da imagem do windows
tor_lin=$img_lin.torrent	#torrent da imagem do linux
riso_service=/etc/avahi/services/riso.service	#servico do servidor de imagem
tab_part=$dir_img/tab_part	#cfdisck -d ; salva tabela de partição no servidor para poder instalar a recuperaçao no cliente
riso_part=$dir_riso/riso.part	#salva partiçães dos respectivos sistemas	
arq_log=$dir_riso/riso.log	#Arquivo de log

#Função de Log
log(){
    [ -e $arq_log ] || touch $arq_log
    echo `date +"%F %H:%M:%S"` "RISOS: $*" >> $arq_log 
}

#Carrega variaveis do arquivo riso.service para variáveis do sistema.
carrega_variaveis() {

    avahi_saida=`avahi-browse -rtp _DECOM_RISO._tcp | grep '='`
    servidor=`ip route | grep src | cut -d ' ' -f12` #modificacao ip do servidor.
    if [ -z $servidor ]; then
        dialog \
        --title 'Atencao' \
        --ok-label 'OK' \
        --msgbox 'O servidor RISOS precisa estar conectado à rede.\nVerifique a conexão e tente novamente.' \
        7 45
        log "ERRO: Servidor não encontrado na rede."
        exit 1
    fi
    partwindows=`(cut -d ';' -f10 | cut -d '"' -f2 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Windows.
    partlinux=`(cut -d ';' -f10 | cut -d '"' -f4 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Linux.
    partrec=`(cut -d ';' -f10 | cut -d '"' -f6 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição de Recuperação.
    partswap=`(cut -d ';' -f10 | cut -d '"' -f8 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição Swap.

    #Tamanho total das imagens criadas no servidor.
    tamwindows=`(cut -d ';' -f10 | cut -d '"' -f10 | cut -d '=' -f2) <<< ${avahi_saida}`
    tamlinux=`(cut -d ';' -f10 | cut -d '"' -f12 | cut -d '=' -f2) <<< ${avahi_saida}`

    #Sistema de arquivo das partições.
    sa_partwindows=`(cut -d ';' -f10 | cut -d '"' -f14 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partlinux=`(cut -d ';' -f10 | cut -d '"' -f16 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partrec=`(cut -d ';' -f10 | cut -d '"' -f18 | cut -d '=' -f2) <<< ${avahi_saida}`
    
    #Atualiza arquivo de variaveis.
    echo 'partwindows='$partwindows > $riso_part
    echo 'partlinux='$partlinux >> $riso_part
    echo 'sa_partwindows='$sa_partwindows >> $riso_part
    echo 'sa_partlinux='$sa_partlinux >> $riso_part
}

#Inicia tracker para disponibilizar imagens na rede.
inicia_servidor() {

	if [ -e ${img_win} -a -e ${img_lin} ]; then
	    log "Tracker iniciado para Windows e Linux."
		bttrack --port 6969 --dfile dstate | grep laialadaiasabadanaavemaria &
		cd ${dir_img}	
		rtorrent ${tor_lin} ${tor_win}
		log "Tracker finalizado para Windows e Linux."
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\n   Não existem imagens prontas.' \
		7 40
		log "ERRO: Ao iniciar tracker para Windows e Linux, Não existem imagens prontas."
		return 2
	fi
	
}

#Inicia tracker para disponibilizar imagem do Windows na rede.
inicia_servidor_windows() {

	if [ -e ${img_win} ]; then
    	log "Tracker iniciado para Windows."
		bttrack --port 6969 --dfile dstate | grep laialadaiasabadanaavemaria &
		cd ${dir_img}
		rtorrent ${tor_win}
		log "Tracker finalizado para Windows."
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\nVocê ainda não criou a imagem do windows.' \
		7 45
		log "ERRO: Ao iniciar tracker para Windows, Não existe imagem pronta."
		return 2
	fi
	
}

#Inicia tracker para disponibilizar imagem do Linux na rede.
inicia_servidor_linux() {

	if [ -e ${img_lin} ]; then
	    log "Tracker iniciado para Linux."
		bttrack --port 6969 --dfile dstate | grep laialadaiasabadanaavemaria &
		cd ${dir_img}		
		rtorrent ${tor_lin}
		log "Tracker finalizado para Linux."
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\nVocê ainda não criou a imagem do linux.' \
		7 44
		log "ERRO: Ao iniciar tracker para o Linux, Não existe imagem pronta."
		return 2
	fi

}

#Cria imagem do Linux.
cria_linux() {

    log "Criando imagem do Linux."
	echo "Removendo imagem antiga do linux..."
	rm -f ${img_lin}
	rm -f ${tor_lin}
	
	#Cria arquivo .tar do linux
	umount /mnt 2> /dev/null
	mount ${partlinux} /mnt
	cd /mnt
	tar -cvf ${img_lin} *
	
	#Atualiza Sistema de arquivo da partição no riso.service
	sa_partlinux=`blkid ${partlinux} | cut -d'"' -f4`
	sed "s/sa_partlinux=[^<]*/sa_partlinux=${sa_partlinux}/" < ${riso_service} > ${riso_service}.tmp
	mv ${riso_service}.tmp ${riso_service}
	
	umount /mnt 2> /dev/null
	log "Imagem do Linux criada."
}

#Cria arquivo .torrent para imagem do linux
cria_torrent_linux() {
	
	if [ -e $img_lin ]; then
	    log "Criando arquivo torrent do linux."
	    #Cria o torrent
	    btmakemetafile.bittorrent ${img_lin} http://${servidor}:6969/announce 2> /dev/null
	
	    #Atualiza o IP do servidor no riso.service
        servidor_antigo=`cat ${riso_service} | grep Servidor= | cut -d '<' -f2 | cut -d '>' -f2`    # modificacao pega ip antigo do arquivo riso.sevice
        sed "s/$servidor_antigo*/Servidor=${servidor}/" < ${riso_service} > ${riso_service}.tmp #
        mv ${riso_service}.tmp ${riso_service}
        
        #Escreve o tamanho da imagem no riso.service
	    tam=`du ${img_lin} | cut -f1` 
	    sed "s/tamlinux=[0-9]*/tamlinux=${tam}/" < ${riso_service} > ${riso_service}.tmp
	    mv ${riso_service}.tmp ${riso_service}

	    log "Arquivo torrent do Linux criado."
	else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do Linux.' \
        7 44
        log "ERRO: Ao criar arquivo torrent do Linux, não existe imagem pronta."
        return 2
	fi
	
}

#Cria imagem do Windows.
cria_windows() {
	
	log "Criando imagem do Windows."
	echo "Removendo imagem antiga do windows..."
	rm -f ${img_win}
    rm -f ${tor_win}

    #Cria arquivo .img do windows
    umount ${partwindows} 2> /dev/null
    ntfsclone -s -O ${img_win} ${partwindows}
    
    #Se não conseguiu criar a imagem
    if [ "$?" -ne "0" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox 'Não consegui criar uma imagem do Windows.\n
O sistema operacional pode ainda não ter sido instalado.\n
A partição ou o sistema de arquivo indicados pelas variáveis\n
partwindows e sa_partwindows em /etc/avahi/services/riso.service\n
pode estar incorreta.\n' \
        0 0
        log "ERRO: Ao criar imagem do Windows, ntfsclone falhou ao criar arquivo windows.img."
        return 3
    fi
    #Atualiza Sistema de arquivo da partição no riso.service
	sa_partwindows=`blkid ${partwindows} | cut -d'"' -f4`
	sed "s/sa_partwindows=[^<]*/sa_partwindows=${sa_partwindows}/" < ${riso_service} > ${riso_service}.tmp
	mv ${riso_service}.tmp ${riso_service}
	log "Imagem do Windows criada."
	
}

#Cria arquivo .torrent para imagem do linux.
cria_torrent_windows() {
	
	if [ -e ${img_win} ]; then
	    log "Criando arquivo torrent do windows."
        btmakemetafile.bittorrent ${img_win} http://${servidor}:6969/announce 2> /dev/null

	    #Atualiza o IP do servidor no riso.service
        servidor_antigo=`cat ${riso_service} | grep Servidor= | cut -d '<' -f2 | cut -d '>' -f2`    # modificacao pega ip antigo do arquivo riso.sevice
        sed "s/$servidor_antigo*/Servidor=${servidor}/" < ${riso_service} > ${riso_service}.tmp #
        mv ${riso_service}.tmp ${riso_service}
        
        #Escreve o tamanho da imagem no riso.service
	    tam=`du ${img_win} | cut -f1`
        sed "s/tamwindows=[0-9]*/tamwindows=${tam}/" < ${riso_service} > ${riso_service}.tmp
	    mv ${riso_service}.tmp ${riso_service}

	    log "Arquivo torrent do windows criado."
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do windows.' \
        7 45
        log "ERRO: Ao criar torrent do windows, não existe imagem pronta."
        return 2
    fi
}


#Pessoas que desenvolveram esse material.
creditos() {

	dialog \
	--ok-label 'OK' \
	--title 'Creditos' \
	--msgbox '                                       \n
		 CENTRO FEDERAL DE EDUCAÇAO TECNOLOGICA  \n
		        Engenharia da Computaçao         \n
		                                         \n
		      Cristiano Goulart Lopes Dias       \n
		    Vinicius Tinti de Paula Oliveira     \n
		       Germano Teixeira de Miranda       \n
		        Gabriel de Souza Brandao         \n
		         Marcio J. Menezes Jr.           \n
		    Gabriel Machado de Castro Fonseca    \n
		      André Luiz Silveira Herculano      \n
		       Gilmar Pereira de Alcantara       \n
		        Alain André Tomaz Amaral         \n
		                                         \n
		           www.dgo.cefetmg.br            \n
		          www.decom.cefetmg.br           \n
		                                         \n'\
		  0 0
}

#Notificação para imagem criada com sucesso
linux_criado() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\nImagem do Linux criada com sucesso.\n' \
		7 40
}

#Notificação para imagem criada com sucesso
windows_criado() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n Imagem do Windows criada com sucesso.\n' \
		7 43
}

#Notificação para imagens criadas com sucesso
imagens_criadas() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n  Imagens criadas com sucesso.\n' \
		7 37
}

#Notificação para torrent criado com sucesso
torrent_linux_criado() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n  Torrent Linux criado com sucesso.\n' \
		7 42
}

#Notificação para torrent criado com sucesso
torrent_windows_criado() {

    dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n  Torrent Windows criado com sucesso.\n' \
		7 43
}

#Notificação para torrent criado com sucesso
torrents_criados() {

    dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\nTorrents do Windows e Linux criados com sucesso.\n' \
		8 0
}

#Acredite isso é um help.
ajuda() {

	dialog \
	--ok-label 'OK' \
	--title 'Help' \
	--msgbox 'Envie um e-mail com suas dúvidas ou sugestões para: 
"alainandre@decom.cefetmg.br" \n e responderei o mais rápido possível.' \
		0 0
}

#Checklist de seleção.
menu_iniciar_servidor() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja disponibilizar para o download na rede:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		"Windows") inicia_servidor_windows;;
		"Linux") inicia_servidor_linux;;
		"Windows Linux") inicia_servidor;;
	esac
	
}

#Checklist de seleção.
menu_criar_imagens() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja criar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  \
	Recuperacao '' off )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		"Windows") cria_windows && cria_torrent_windows && windows_criado;;
		"Linux") cria_linux && cria_torrent_linux && linux_criado;;
		"Windows Linux") cria_windows && cria_torrent_windows && cria_linux && cria_torrent_linux && imagens_criadas;;
	esac
	
}

#Checklist de seleção.
menu_criar_torrents() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais torrents deseja criar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  )

    # De acordo com a opção escolhida, executa funcoes
	case $opcao in
		"Windows") cria_torrent_windows && torrent_windows_criado;;
		"Linux") cria_torrent_linux && torrent_linux_criado;;
		"Windows Linux") cria_torrent_windows && cria_torrent_linux && torrents_criados;;
	esac
	
}

#Menu pricipal.
menu() {

	while : ; do
	opcao=$(
		dialog --stdout                         \
		--ok-label 'Confirmar'                  \
		--cancel-label 'Sair'                   \
		--title 'RISOS - 1.0'                   \
		--menu 'Escolha o que voce quer fazer:' \
			0 0 0                               \
			1 'Iniciar servidor'                \
			2 'Criar imagens'                   \
			3 'Criar torrents'                  \
			4 'Créditos'                        \
			5 'Ajuda'                            )
	
		# ESC, sai do programa...
		[ $? -ne 0 ] && break
	
		# De acordo com a opção escolhida, executa funçao
		case $opcao in
			1) menu_iniciar_servidor;;
			2) menu_criar_imagens;;
			3) menu_criar_torrents;;
			4) creditos;;
			5) ajuda;;
		esac	

	done
	
}

#Verifica se usuário é root antes de iniciar o risos.
USER=`id -u`
if [ $USER == '0' ]; then
    log "Iniciando RISOS -------------------------------------------------------"
    carrega_variaveis && menu
    log "Finalizando RISOS -----------------------------------------------------"
	clear
else
	echo "Este script deve ser executado com o usuario root"
	echo "\"Great scripts come with great responsabilities...\" - Uncle Juan"
	exit 1
fi
